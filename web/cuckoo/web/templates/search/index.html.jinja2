{% extends "base.html.jinja2" %}
{% set active_page = "search" %}
{% set title = "Search" %}

{% block page_script %}
<script type="text/javascript">
  (function() {

    // dom references
    const searchForm    = document.querySelector('#search-form');
    const submit        = searchForm.querySelector('input[type="submit"]');
    const results       = document.querySelector('#results tbody');
    const skip          = document.querySelectorAll('#pagination [data-skip]');
    const pages         = document.querySelector('#pagination .current-page');
    const selectLimit   = document.querySelector('#select-limit select');
    const selectedLimit = document.querySelector('#selected-limit');
    const currentPage   = document.querySelector('#current-page');

    const props = window.props = {
      offset: 0,
      query: searchForm.elements[0].value,
      limit: 10,
      count: 0
    };

    // indicates something running in the background inside a button
    // - the button disabled when the spinner is loading
    function buttonLoader(btn) {
      if(!btn instanceof HTMLElement) return;
      const originalContent = btn.textContent;
      return {
        start: () => {
          btn.innerHTML = `<i class="fas fa-spinner fa-spin"></i>`;
          btn.disabled = true;
        },
        stop: () => {
          btn.textContent = originalContent;
          btn.disabled = false;
        }
      }
    }

    // prints a message in the table with a formatted error.
    function handleError(data) {

      if(data instanceof Error)
        data = { error: data.name + ': ' + data.message + ' (javascript error)' };

      const currentError = results.querySelector('tr#search-error');
      if(currentError) currentError.remove();

      results.innerHTML = `
        <tr class="has-background-red" id="search-error">
          <td colspan="4">
            <p class="has-text-center">${data.error}</p>
          </td>
        </tr>
      `;
    }

    // a single row with a message to display for idle and empty states
    function messageRow(rowText) {
      if(!rowText)
        rowText = 'Type a query in the search bar above to display results.';
      results.innerHTML = `
        <tr>
          <td colspan="4">
            <p class="has-half-opacity has-text-center">${rowText}</p>
          </td>
        </tr>
      `;
    }

    // request serializer
    function search(query) {

      if(!window.csrf_token) return Promise.reject({error: 'No CSRF token present.'});
      if(query) props.query = query;

      return new Promise((resolve, reject) => {

        const btn = buttonLoader(submit);
        btn.start();

        fetch('/api/search', {
          method: 'POST',
          headers: {
            'X-CSRFToken': window.csrf_token,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(props)
        }).then(res => res.json())
          .then(res => resolve(res))
          .catch(err => reject(err))
          .finally(() => btn.stop());

      });

    }

    // renders rows with results
    function displayResults(data, rowText) {
      const { count, matches, offset, possible } = data;
      props.count = count;

      results.innerHTML = '';

      if(results.querySelector('#search-error'))
        results.querySelector('#search-error').remove();

      if(matches && matches.length) {
        results.innerHTML = matches.map(match => `
          <tr>
            <td>${match.analysis_id}</td>
            <td>${match.task_id}</td>
            ${match.matches.map(m => `
              <td>${m.field}</td>
              <td>${m.matches.join('<br />')}</td>
            `).join('')}
          </tr>
        `).join('');
      } else {
        messageRow('No results returned.');
      }

      updatePagination();
    }

    // when this function is called, the props state will be used to reflect the
    // offset, limit and pagination models into the UI.
    function updatePagination() {

      const { offset, limit, count } = props;

      if(offset <= 0) {
        [skip[0], skip[1], skip[2]].forEach(p => p.classList.add('is-disabled'));
      } else {
        [skip[0], skip[1], skip[2]].forEach(p => p.classList.remove('is-disabled'));
      }

      if(count !== limit) {
        [skip[3], skip[4], skip[5]].forEach(p => p.classList.add('is-disabled'));
      } else {
        [skip[3], skip[4], skip[5]].forEach(p => p.classList.remove('is-disabled'));
      }

      pages.textContent = `${offset} - ${offset + limit}`;
      selectedLimit.textContent = props.limit;
      currentPage.textContent = offset / limit;
    }

    document.addEventListener('DOMContentLoaded', () => {

      // engage async search by submitting the search form (enter or click)
      searchForm.addEventListener('submit', ev => {
        ev.preventDefault();
        const values = new FormData(searchForm);
        search(values.get('query'))
          .then(displayResults)
          .catch(handleError);
      });

      // bind pagination buttons
      skip.forEach(s => s.addEventListener('click', ev => {
        ev.preventDefault();
        props.offset += parseInt(s.getAttribute('href')) * props.limit;
        if(props.offset <= 0) props.offset = 0;
        search(props.query)
          .then(displayResults)
          .catch(handleError);
      }));

      // limit selector
      selectLimit.addEventListener('change', ev => {
        props.limit = parseInt(selectLimit.value);
        search(props.query)
          .then(displayResults)
          .catch(handleError);
      });

      // display idle message on startup
      messageRow();
      updatePagination();

    });

  }());
</script>
{% endblock %}

{% block body %}
  <section class="section has-background-white">
    <div class="container">
      <h1>Search</h1>
      <form class="form" method="POST" id="search-form">
        <div class="field columns is-divided is-vcenter is-gapless">
          <div class="column is-auto">
            <label class="label" for="search">Search query</label>
          </div>
          <div class="column has-padding-x">
            <div class="control">
              <input class="input" id="search" name="query" value="event.file.file_read:system32" />
            </div>
          </div>
          <div class="column is-auto">
            <input type="submit" class="button is-blue" value="Search" />
          </div>
        </div>
      </form>
    </div>
  </section>
  <section class="section no-padding-y">
    <table class="table has-sticky-header has-sticky-footer" id="results">
      <thead>
        <tr>
          <th>Analysis id</th>
          <th>Task id</th>
          <th>Field</th>
          <th>Matches</th>
        </tr>
      </thead>
      <tbody></tbody>
      <tfoot>
        <tr>
          <td colspan="4">
            <div class="columns is-between is-vcenter">
              <div class="column">
                <ul class="list is-horizontal no-margin-y">
                  <li class="has-popover">

                    Up to <a class="is-link" href="#" data-popover="#select-limit">
                      <span id="selected-limit"></span> <i class="fas fa-caret-down"></i>
                    </a> results per page

                    <div class="popover is-top" id="select-limit">
                      <label class="label">Results per page:</label>
                      <div class="control is-select">
                        <select class="input">
                          <option value="10">10</option>
                          <option value="20">20</option>
                          <option value="50">50</option>
                          <option value="100">100</option>
                        </select>
                      </div>
                    </div>

                  </li>
                  <li>Showing page <span id="current-page"></span></li>
                </ul>
              </div>
              <div class="column">
                <div class="buttons-conjoined has-margin-x" id="pagination">
                  <a class="button is-white" data-skip href="-10">
                    <i class="fas has-half-opacity fa-chevron-left"></i> 10
                  </a>
                  <a class="button is-white" data-skip href="-5">
                    <i class="fas has-half-opacity fa-chevron-left"></i> 5
                  </a>
                  <a class="button is-white" data-skip href="-1">
                    <i class="fas has-half-opacity fa-chevron-left"></i> 1
                  </a>

                  <a class="button is-blue current-page">0</a>

                  <a class="button is-white" data-skip href="1">
                    <i class="fas has-half-opacity fa-chevron-right"></i> 1
                  </a>
                  <a class="button is-white" data-skip href="5">
                    <i class="fas has-half-opacity fa-chevron-right"></i> 5
                  </a>
                  <a class="button is-white" data-skip href="10">
                    <i class="fas has-half-opacity fa-chevron-right"></i> 10
                  </a>
                </div>
              </div>
            </div>
          </td>
        </tr>
      </tfoot>
    </table>
  </section>
{% endblock %}
