{#
  renders a table. some configuration on ordering of property names have to be
  provided. Although it seems a bit complex, it can help a lot to maintain
  readability and quickly displaying data sets into the UI.

    required:
      data                Array or Dict    Rows to display inside the table.
      cols                Array            Columns, these refer in that order to the data objects.

    optional:
      labels              Array            Customized or human-friendly labels, follows the same order as cols.
      style               Array            Cell styles, pass in any text modifier, as defined in _typography.sass.
                                           To apply multple, define the casses space separated. If no style has to be applied,
                                           leave None. Order is the same als column order.
      has_sticky_header  Boolean           Wether or not to apply a sticky header experience.

  example:

    {{ render_table(
                    data = my_data,
                    cols = ["first_name", "last_name", "age"],
                    labels = ["First name", "Last name", "Age"],
                    style: ["has-text-right", None, "is-monospace has-text-red"]
                  )
    }}
#}
{% macro render_table(data=[], cols=[], labels=[], style=[], has_sticky_header=False) %}
  <table class="table {% if has_sticky_header %}has-sticky-header{% endif %}">
    <thead>
      <tr>
        {% for col in cols %}
          <th>
            {% if not labels[loop.index-1] %}
              {{ col }}
            {% else %}
              {{ labels[loop.index-1] }}
            {% endif %}
          </th>
        {% endfor %}
      </tr>
    </thead>
    <tbody>
      {% if not data is mapping %}
        {% for entry in data %}
          <tr>
            {% for col in cols %}
              <td {% if style[loop.index-1] %} class="{{ style[loop.index-1] }}"{% endif %}>{{ entry[col] }}</td>
            {% endfor %}
          </tr>
        {% else %}
          <tr>
            <td {% if style[loop.index-1] %} class="{{ style[loop.index-1] }}"{% endif %} colspan="{{ cols|length }}">No data</td>
          </tr>
        {% endfor %}
      {% else %}
        {% for val in data.values() %}
          <tr>
            {% for col in cols %}
              <td>{{ val[col] }}</td>
            {% endfor %}
          </tr>
        {% else %}
          <tr>
            <td {% if style[loop.index-1] %} class="{{ style[loop.index-1] }}"{% endif %} colspan="{{ cols|length }}">No data</td>
          </tr>
        {% endfor %}
      {% endif %}
    </tbody>
  </table>
{% endmacro %}

{#
  renders a dict according to the data structure and contents. In theory,
  you could use this macro to print out an entire JSON blob in a representable
  format. uses <details> for native collapsing of dict-like childs.

  It will render the dict inside a light-themed box, with child dictionaries
  being darker shades that will stack visually on top of each other. When it
  comes along a string, it will be rendered as a key value, and arrays will
  represent their values in a list format.

    dict  Dict  input dictionary to parse

  example:

  {% d = some_dict_variable %}

  {{ render_dict(d) }}

#}
{% macro render_dict(dict) %}
  <ul class="list is-reset has-padding-x">
    {% for key, value in dict.items() %}
      <li>
        {% if value is mapping or value is iterable and value is not string and value is not boolean %}
          <details class="details box has-background-stack-shade is-grouped">
            <summary>
              <h4 class="has-text-uppercased has-text-weight-bold has-text-small has-half-opacity no-margin">{{ key }}</h4>
            </summary>
            {% if value is mapping %}
              {{ render_dict(value) }}
            {% elif value is iterable %}
              <ul class="list has-text-small">
                {% for val in value %}
                  <li>{{ val }}</li>
                {% endfor %}
              </ul>
            {% endif %}
          </details>
        {% else %}
          <div class="box has-background-stack-shade is-grouped">
            <h4 class="has-text-uppercased has-text-weight-bold has-text-small no-margin">
              <span class="dot is-blue no-margin-left has-margin-right"></span>
              <span class="has-half-opacity">{{ key }}:</span> <span class="is-monospace">{{ key }}</span>
            </h4>
          </div>
        {% endif %}
      </li>
    {% endfor %}
  </ul>
{% endmacro %}

{#
  renders a box, where the contents can be defined inside the macro call. Using this
  method provides a consistent use of repeatable HTML. This utility exposes a few options:

    title           String    Title of the UI container
    prefix          String    Attached to ID used for the collapsing functionality
    description     String    Description of content, [needs to prove its usage]
    display_title   Boolean   Whether or not to display the title. Also disables collapsibility.
    no_padding      Boolean   Whether or not to add an extra padding to the box content section
    collapsible     Boolean   Toggles collapsing functionality on or off
    collapsed       Boolean   Default collapse state

  example:

    {% call ui_box(title="hello world") %}
      <p>Wrapped contents of the box.</p>
    {% endcall %}

#}
{% macro ui_box(title="page", prefix="box", description="", display_title=True, has_padding=True, collapsible=True, collapsed=False) %}
  {% set boxid = prefix + "-" + title|replace(" ","-") %}
  <div class="box has-background-white has-shadow no-padding has-border">
    {% if display_title == True and title %}
      <h3 class="box-title">{{ title }}
        {% if collapsible %}
        <a href="#"
          onclick="toggleVisibility(this.parentNode.parentNode.querySelector('#{{boxid}}'), null, event);"
          class="pull-right {% if collapsible %} {% if not collapsed %}visibility-visible{% else %}visibility-hidden{% endif %}{% endif %}">
          <i class="fas chevron"></i>
        </a>
        {% endif %}
      </h3>
    {% endif %}
    {% if description|length > 0 %}<p class="has-padding no-margin">{{ description }}</p>{% endif %}
    <div id="{{ boxid }}"
      class="{% if has_padding == True %}has-padding{% endif %}"
      {% if collapsible and collapsed %}hidden{% endif%}>
      {{ caller() }}
    </div>
  </div>
{% endmacro %}
