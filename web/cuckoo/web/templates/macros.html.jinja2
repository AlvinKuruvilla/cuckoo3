{#
  renders a table. some configuration on ordering of property names have to be
  provided. Although it seems a bit complex, it can help a lot to maintain
  readability and quickly displaying data sets into the UI.

    required:
      data                Array or Dict    Rows to display inside the table.
      cols                Array            Columns, these refer in that order to the data objects.

    optional:
      labels              Array            Customized or human-friendly labels, follows the same order as cols.
      style               Array            Cell styles, pass in any text modifier, as defined in _typography.sass.
                                           To apply multple, define the casses space separated. If no style has to be applied,
                                           leave None. Order is the same als column order.
      has_sticky_header  Boolean           Wether or not to apply a sticky header experience.

  example:

    {{ render_table(
                    data = my_data,
                    cols = ["first_name", "last_name", "age"],
                    labels = ["First name", "Last name", "Age"],
                    style: ["has-text-right", None, "is-monospace has-text-red"]
                  )
    }}
#}
{% macro render_table(data=[], cols=[], labels=[], style=[], types=[], has_sticky_header=False) %}
  <table class="table {% if has_sticky_header %}has-sticky-header{% endif %}">
    <thead>
      <tr>
        {% for col in cols %}
          <th>
            {% if not labels[loop.index-1] %}
              {{ col }}
            {% else %}
              {{ labels[loop.index-1] }}
            {% endif %}
          </th>
        {% endfor %}
      </tr>
    </thead>
    <tbody>
      {% if not data is mapping %}
        {% for entry in data %}
          <tr>
            {% for col in cols %}
              <td {% if style[loop.index-1] %} class="{{ style[loop.index-1] }}"{% endif %}>
                {% if style[loop.index-1] == 'is-clickable' %}
                  <a href="{{entry[col]}}" class="is-link" target="_blank">{{ entry[col] }}</a>
                {% elif style[loop.index-1] == 'is-datetime' %}
                  {{ entry[col]|formatisodatetime }}
                {% else %}
                  {{ entry[col] }}
                {% endif %}
              </td>
            {% endfor %}
          </tr>
        {% else %}
          <tr>
            <td colspan="{{ cols|length }}">No data</td>
          </tr>
        {% endfor %}
      {% else %}
        {% for val in data.values() %}
          <tr>
            {% for col in cols %}
              <td {% if style[loop.index-1] %} class="{{ style[loop.index-1] }}"{% endif %}>
                {% if style[loop.index-1] == 'is-clickable' %}
                  <a href="{{val[col]}}" class="is-link" target="_blank">{{ val[col] }}</a>
                {% elif style[loop.index-1] == 'is-datetime' %}
                  {{ val[col]|formatisodatetime }}
                {% else %}
                  {{ val[col] }}
                {% endif %}
              </td>
            {% endfor %}
          </tr>
        {% else %}
          <tr>
            <td colspan="{{ cols|length }}">No data</td>
          </tr>
        {% endfor %}
      {% endif %}
    </tbody>
  </table>
{% endmacro %}

{#
  renders a dict according to the data structure and contents. In theory,
  you could use this macro to print out an entire JSON blob in a representable
  format. uses <details> for native collapsing of dict-like childs.

  It will render the dict inside a light-themed box, with child dictionaries
  being darker shades that will stack visually on top of each other. When it
  comes along a string, it will be rendered as a key value, and arrays will
  represent their values in a list format.

    dict  Dict  input dictionary to parse

  example:

  {% d = some_dict_variable %}

  {{ render_dict(d) }}

#}
{% macro render_dict(dict, depth=0) %}
  <ul class="json-expander is-monospace has-text-bold">
    {% for key, value in dict.items() %}
    <li>
      {% if value is mapping %}
        <details>
          <summary class="has-margin-bottom">
            <span class="has-text-blue">{{ key }}:</span>
            <span class="has-text-small">&#123;{{ value|length }}&#125;</span>
          </summary>
          {{ render_dict(value) }}
        </details>
      {% elif value is string %}
        <p>
          <span class="has-half-opacity">{{key}}:</span>
          <span class="is-string">{{ value }}</span>
        </p>
      {% elif value is integer %}
        <p>
          <span class="has-half-opacity">{{ key }}:</span>
          <span class="is-integer">{{ value }}</span>
        </p>
      {% elif value is boolean %}
        <p>
          <span class="has-half-opacity">{{ key }}:</span>
          <span class="is-boolean">{{ value }}</span>
        </p>
      {% elif value is iterable %}
        <details>
          <summary>
            <span class="is-array">{{ key }}:</span>
            <span class="has-text-small">&#91;{{ value|length }}&#93;</span>
          </summary>
          <ul>
            {% for val in value %}
              <li>
                <p>
                  <span class="has-half-opacity">{{loop.index}}:</span>
                  {{ val }}
                </p>
              </li>
            {% endfor %}
          </ul>
        </details>
      {% else %}
        {{ key }}: {{ value }}
      {% endif %}
    </li>
    {% endfor %}
  </ul>
{% endmacro %}

{#
  renders a box, where the contents can be defined inside the macro call. Using this
  method provides a consistent use of repeatable HTML. This utility exposes a few options:

    title           String    Title of the UI container
    prefix          String    Attached to ID used for the collapsing functionality
    description     String    Description of content, [needs to prove its usage]
    display_title   Boolean   Whether or not to display the title. Also disables collapsibility.
    no_padding      Boolean   Whether or not to add an extra padding to the box content section
    collapsible     Boolean   Toggles collapsing functionality on or off
    collapsed       Boolean   Default collapse state

  example:

    {% call ui_box(title="hello world") %}
      <p>Wrapped contents of the box.</p>
    {% endcall %}

#}
{% macro ui_box(title="page", prefix="box", description="", display_title=True, has_padding=True, collapsible=True, collapsed=False) %}
  {% set boxid = prefix + "-" + title|replace(" ","-") %}
  <div class="box has-background-white has-shadow no-padding has-border">
    {% if display_title == True and title %}
      <h3 class="box-title">{{ title }}
        {% if collapsible %}
        <a href="#"
          onclick="toggleVisibility(this.parentNode.parentNode.querySelector('#{{boxid}}'), null, event);"
          class="pull-right {% if collapsible %} {% if not collapsed %}visibility-visible{% else %}visibility-hidden{% endif %}{% endif %}">
          <i class="fas chevron"></i>
        </a>
        {% endif %}
      </h3>
    {% endif %}
    {% if description|length > 0 %}<p class="has-padding no-margin">{{ description }}</p>{% endif %}
    <div id="{{ boxid }}"
      class="{% if has_padding == True %}has-padding{% endif %}"
      {% if collapsible and collapsed %}hidden{% endif%}>
      {{ caller() }}
    </div>
  </div>
{% endmacro %}

{#
  Renders an error display from an array of errors

    errors  List  array containing all the error messages

  Example:

    {{ error_box(['error 1', 'error 2']) }}

  or

    {% call error_box(['error 1', 'error 2']) %}
      <p>Custom description label for this box.</p>
    {% endcall %}

#}
{% macro error_box(errors) %}
  <div class="box has-background-white has-shadow no-padding has-border">
    <h3 class="box-title is-red">
      <span class="icon has-text-red">
        <i class="fas fa-exclamation"></i>
      </span> Errors</h3>
    {% if caller %}{{ caller() }}{% endif %}
    <div class="has-padding">
      {% for err in errors %}
        <div class="banner no-margin-top is-danger has-padding">
          <p class="has-padding-x">{{ err }}</p>
        </div>
      {% endfor %}
    </div>
  </div>
{% endmacro %}

{#

  Provides the translation from a score from 1-10 to a color class representation.

    score   Number  The score to translate into a color class

  Example:

    <p class="{{ color_class(analysis.score) }}">{{ analysis.verdict }}</p>
    <!-- could be rendered as: -->
    <p class="is-danger">This file is most likely severely malicious.</p>

#}
{% macro color_class(s=1) %}{% if s>=8 %}is-red{% elif s>=6 %}is-yellow{% endif %}{% endmacro %}
{% macro color_text(s=1) %}{% if s>=8 %}has-text-red{% elif s>=6 %}has-text-yellow{% endif %}{% endmacro %}

{#

  Repetitive UI model for signature views

    signatures  List  Signatures (List of Dicts) to display

  Example

    {{ ui_signatures([{...},{...}]) }}

#}
{% macro ui_signatures(signatures=[]) %}

  <table class="table">
    <thead>
      <tr>
        <th>&nbsp;</th>
        <th colspan="2">Description</th>
        <th>&nbsp;</th>
      </tr>
    </thead>
    <tbody>
      {% for signature in signatures|sort(attribute='score',reverse=True) %}
        {% set hasIOCs = signature.iocs and signature.iocs|length > 0 %}
        <tr data-row="{{ loop.index }}">
          <td><span class="tag {{ color_class(signature.score) }}">{{ signature.score }}</span></td>
          <td>{{ signature.short_description }}</td>
          <td>{{ signature.description }}</td>
          <td class="no-text-wrap">
            {% if hasIOCs %}
              <a class="is-link has-text-small toggle-ioc" href="#">{{ signature.iocs|length }} IOC's.</a>
            {% endif %}
          </td>
        </tr>
        <tr hidden data-row-of="{{ loop.index }}">
          <td colspan="4" class="no-padding has-border-y">
            {% if hasIOCs %}
              {{ render_table(data = signature.iocs, cols = signature.iocs[0].keys()) }}
            {% endif %}
          </td>
        </tr>
      {% endfor %}
    </tbody>
  </table>

{% endmacro %}
