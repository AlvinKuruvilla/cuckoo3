{#
  smart-cutting long lines of text, with optional initialization with
  click-to-copy.

    required:
      str         String    The string value to shorten
      max_chars   Integer   Maximum characters allowed before stripping

    optional:
      copy        Boolean   Set to True to enable click-to-copy
      annotate    Boolean   Set to True

    example:

      <p>{{ trim_string(str="Hello world", max_chars=5, copy=True, annotate=True) }}</p>

      output:

      <p data-click-to-copy data-value="Hello world">Hello... (trimmed 5 characters)</p>
#}
{% macro trim_string(str="", max_chars=2000, copy=False, annotate=False) %}
  {% set is_trimmed = False %}
  {% set value = str %}
  {% if str is string and str|length > max_chars %}
    {% set value = value[0:max_chars] %}
    {% set is_trimmed = True %}
  {% endif %}
  {% if is_trimmed %}
    <span {% if copy %}data-click-to-copy data-value="{{str}}"{% endif %}>
      {{ value }}...
      {% if annotate %}
        <small style="display: block; margin-top: .5rem">({{ str|length - max_chars }} characters trimmed. {% if copy %}Click to copy.{% endif %})</small>
      {% endif %}
    </span>
  {% else %}
    {{ str }}
  {% endif %}
{% endmacro %}

{#
  renders a table. some configuration on ordering of property names have to be
  provided. Although it seems a bit complex, it can help a lot to maintain
  readability and quickly displaying data sets into the UI.

    required:
      data                Array or Dict    Rows to display inside the table.
      cols                Array            Columns, these refer in that order to the data objects.

    optional:
      labels              Array            Customized or human-friendly labels, follows the same order as cols.
      style               Array            Cell styles, pass in any text modifier, as defined in _typography.sass.
                                           To apply multple, define the casses space separated. If no style has to be applied,
                                           leave None. Order is the same als column order.
      has_sticky_header   Boolean          Wether or not to apply a sticky header experience.
      striped             Boolean          Set to False to disable odd/even stripes in the table body

  example:

    {{ render_table(
                    data = my_data,
                    cols = ["first_name", "last_name", "age"],
                    labels = ["First name", "Last name", "Age"],
                    style = ["has-text-right", None, "is-monospace has-text-red"],
                    striped = False
                  )
    }}
#}
{% macro render_table(data=[], cols=[], labels=[], style=[], types=[], has_sticky_header=False, striped=True) %}
  <table class="table {% if has_sticky_header %}has-sticky-header{% endif %} {% if striped %}has-striped-rows{% endif %}">
    <thead>
      <tr>
        {% for col in cols %}
          <th>
            {% if not labels[loop.index-1] %}
              {{ col }}
            {% else %}
              {{ labels[loop.index-1] }}
            {% endif %}
          </th>
        {% endfor %}
      </tr>
    </thead>
    <tbody>
      {% if not data is mapping %}
        {% for entry in data %}
          <tr>
            {% for col in cols %}

              {% if entry[col] is string and entry[col]|length > 200 %}
                {% set apply_word_breaking = True %}
              {% endif %}

              <td class="{% if apply_word_breaking %}is-break{% endif %} {% if style[loop.index-1] %}{{ style[loop.index-1] }}{% endif %}">
                {% if style[loop.index-1] == 'is-clickable' %}
                  <a href="{{entry[col]}}" class="is-link" target="_blank">{{ trim_string(entry[col], copy=True, annotate=True) }}</a>
                {% elif style[loop.index-1] == 'is-datetime' %}
                  {{ entry[col]|formatisodatetime }}
                {% else %}
                  {{ trim_string(entry[col], copy=True, annotate=True) }}
                {% endif %}
              </td>
            {% endfor %}
          </tr>
        {% else %}
          <tr>
            <td colspan="{{ cols|length }}">No data</td>
          </tr>
        {% endfor %}
      {% else %}
        {% for val in data.values() %}
          <tr>
            {% for col in cols %}
              {% if val[col] is string and val[col]|length > 200 %}
                {% set apply_word_breaking = True %}
              {% endif %}
              <td class="{% if apply_word_breaking %}is-break{% endif %} {% if style[loop.index-1] %}{{ style[loop.index-1] }}{% endif %}">
                {% if style[loop.index-1] == 'is-clickable' %}
                  <a href="{{val[col]}}" class="is-link" target="_blank">{{ trim_string(val[col], copy=True, annotate=True) }}</a>
                {% elif style[loop.index-1] == 'is-datetime' %}
                  {{ val[col]|formatisodatetime }}
                {% else %}
                  {{ trim_string(val[col], copy=True, annotate=True) }}
                {% endif %}
              </td>
            {% endfor %}
          </tr>
        {% else %}
          <tr>
            <td colspan="{{ cols|length }}">No data</td>
          </tr>
        {% endfor %}
      {% endif %}
    </tbody>
  </table>
{% endmacro %}

{#
  renders a dict according to the data structure and contents. In theory,
  you could use this macro to print out an entire JSON blob in a representable
  format. uses <details> for native collapsing of dict-like childs.

  It will render the dict inside a light-themed box, with child dictionaries
  being darker shades that will stack visually on top of each other. When it
  comes along a string, it will be rendered as a key value, and arrays will
  represent their values in a list format.

    dict  Dict  input dictionary to parse

  example:

  {% d = some_dict_variable %}

  {{ render_dict(d) }}

#}
{% macro render_dict(dict, depth=0) %}
  <ul class="json-expander is-monospace has-text-bold">
    {% for key, value in dict.items() %}
    <li>
      {% if value is mapping %}
        <details>
          <summary class="has-margin-bottom">
            <span class="has-text-blue">{{ key }}:</span>
            <span class="has-text-small">&#123;{{ value|length }}&#125;</span>
          </summary>
          {{ render_dict(value) }}
        </details>
      {% elif value is string %}
        <p>
          <span class="has-half-opacity">{{key}}:</span>
          <span class="is-string">{{ value }}</span>
        </p>
      {% elif value is integer %}
        <p>
          <span class="has-half-opacity">{{ key }}:</span>
          <span class="is-integer">{{ value }}</span>
        </p>
      {% elif value is boolean %}
        <p>
          <span class="has-half-opacity">{{ key }}:</span>
          <span class="is-boolean">{{ value }}</span>
        </p>
      {% elif value is iterable %}
        <details>
          <summary>
            <span class="is-array">{{ key }}:</span>
            <span class="has-text-small">&#91;{{ value|length }}&#93;</span>
          </summary>
          <ul>
            {% for val in value %}
              <li>
                <p>
                  <span class="has-half-opacity">{{loop.index}}:</span>
                  {{ val }}
                </p>
              </li>
            {% endfor %}
          </ul>
        </details>
      {% else %}
        {{ key }}: {{ value }}
      {% endif %}
    </li>
    {% endfor %}
  </ul>
{% endmacro %}

{#
  renders a box, where the contents can be defined inside the macro call. Using this
  method provides a consistent use of repeatable HTML. This utility exposes a few options:

    title           String    Title of the UI container
    prefix          String    Attached to ID used for the collapsing functionality
    id              String    Alternative ID when the title id will not work
    description     String    Description of content, [needs to prove its usage]
    display_title   Boolean   Whether or not to display the title. Also disables collapsibility.
    no_padding      Boolean   Whether or not to add an extra padding to the box content section
    collapsible     Boolean   Toggles collapsing functionality on or off
    collapsed       Boolean   Default collapse state
    hidden          Boolean   Hides the element by default, use this whenever the UI needs to wait
                              on certain javascript handlers.

  example:

    {% call ui_box(title="hello world") %}
      <p>Wrapped contents of the box.</p>
    {% endcall %}

#}
{% macro ui_box(title="page", prefix="box", id=False, description="", display_title=True, has_padding=True, collapsible=True, collapsed=False, hidden=False) %}
  {% if id %}
    {% set boxid = id %}
  {% else %}
    {% set boxid = prefix + "-" + title|replace(" ","-")|escape %}
  {% endif %}
  <div class="box has-background-white has-shadow no-padding has-border" {% if hidden %}hidden{% endif %}>
    {% if display_title == True and title %}
      <h3 class="box-title">{{ title }}
        {% if collapsible %}
        <a href="#"
          onclick="toggleVisibility(this.parentNode.parentNode.querySelector('#{{boxid}}'), null, event);"
          class="pull-right {% if collapsible %} {% if not collapsed %}visibility-visible{% else %}visibility-hidden{% endif %}{% endif %}">
          <i class="fas chevron"></i>
        </a>
        {% endif %}
      </h3>
    {% endif %}
    {% if description|length > 0 %}<p class="has-padding no-margin">{{ description }}</p>{% endif %}
    <div id="{{ boxid }}"
      class="{% if has_padding == True %}has-padding{% endif %}"
      {% if collapsible and collapsed %}hidden{% endif%}>
      {{ caller() }}
    </div>
  </div>
{% endmacro %}

{#
  Renders an error display from an array of errors

    errors  List  array containing all the error messages

  Example:

    {{ error_box(['error 1', 'error 2']) }}

  or

    {% call error_box(['error 1', 'error 2']) %}
      <p>Custom description label for this box.</p>
    {% endcall %}

#}
{% macro error_box(errors) %}
  <div class="box has-background-white has-shadow no-padding has-border">
    <h3 class="box-title is-red">
      <span class="icon has-text-red">
        <i class="fas fa-exclamation"></i>
      </span> Errors</h3>
    {% if caller %}{{ caller() }}{% endif %}
    <div class="has-padding">
      {% for err in errors %}
        <div class="banner no-margin-top is-danger has-padding">
          <p class="has-padding-x">{{ err }}</p>
        </div>
      {% endfor %}
    </div>
  </div>
{% endmacro %}

{#

  Provides the translation from a score from 1-10 to a color class representation.

    score   Number  The score to translate into a color class

  Example:

    <p class="{{ color_class(analysis.score) }}">{{ analysis.verdict }}</p>
    <!-- could be rendered as: -->
    <p class="is-danger">This file is most likely severely malicious.</p>

#}
{% macro color_class(s=1) %}{% if s>=8 %}is-red{% elif s>=6 %}is-yellow{% endif %}{% endmacro %}
{% macro color_text(s=1) %}{% if s>=8 %}has-text-red{% elif s>=6 %}has-text-yellow{% endif %}{% endmacro %}

{#

  Repetitive UI model for signature views

    signatures  List  Signatures (List of Dicts) to display

  Example

    {{ ui_signatures([{...},{...}]) }}

#}
{% macro ui_signatures(signatures=[]) %}
  <table class="table has-striped-rows">
    <thead>
      <tr>
        <th>&nbsp;</th>
        <th colspan="2">Description</th>
        <th>&nbsp;</th>
      </tr>
    </thead>
    <tbody>
      {% for signature in signatures|sort(attribute='score',reverse=True) %}
        {% set hasIOCs = signature.iocs and signature.iocs|length > 0 %}
        <tr data-row="{{ loop.index }}">
          <td><span class="tag {{ color_class(signature.score) }}">{{ signature.score }}</span></td>
          <td>{{ signature.short_description }}</td>
          <td>{{ signature.description }}</td>
          <td class="no-text-wrap">
            {% if hasIOCs %}
              <a class="is-link has-text-small toggle-ioc" href="#">{{ signature.iocs|length }} IOC's.</a>
            {% endif %}
          </td>
        </tr>
        <tr hidden data-row-of="{{ loop.index }}">
          <td colspan="4" class="no-padding has-border-y">
            {% if hasIOCs %}
              {{ render_table(data = signature.iocs, cols = signature.iocs[0].keys()) }}
            {% endif %}
          </td>
        </tr>
      {% endfor %}
    </tbody>
  </table>
{% endmacro %}

{#

  String search component

    id        String     Reference name of the string  collection
    strings   Array      String collection to render as a list (and/or datalist)
    datalist  Boolean    Toggles the optional use of HTML <datalist> on or off

#}
{% macro ui_strings(id="strings", strings=[], datalist=True) %}
  <div class="box has-background-white no-padding-x no-padding-bottom has-shadow">
    <div class="columns is-divided is-vcenter">
      <div class="column is-auto">
        <h4 class="no-margin has-text-weight-normal"><span data-search-status="{{ id }}"></span>/<span class="has-half-opacity">{{ strings|length }} results</span></h4>
      </div>
      <div class="column">
        <div class="field no-margin">
          <div class="control has-addon">
            <span class="addon has-half-opacity">
              <i class="fas fa-search"></i>
            </span>
            <input {% if datalist %}list="datalist-{{id}}"{% endif %} type="search" class="input" placeholder="Type to filter by string occurence" data-enhance="#{{ id }}" />
            {% if datalist %}
              <datalist id="datalist-{{id}}">
                {% for str in strings %}
                  <option value="{{str}}" />
                {% endfor %}
              </datalist>
            {% endif %}
          </div>
        </div>
      </div>
    </div>
    <ol class="list is-strings-list" id="{{ id }}">
      {% for str in strings %}
        <li
          {% if loop.index % 2 != 0 %}class="is-odd"{% endif %}
          data-count="{{loop.index}}"
          data-search-value="{{ str }}">
          {{ str }}
        </li>
      {% endfor %}
      <li class="has-padding" role="log">No results</li>
    </ol>
  </div>
{% endmacro %}

{% macro custom_cuckoo_loader() %}

  <div class="loader loader-cuckoo loader-out loader-hidden">
    <div class="loader-icon">
      <svg viewBox="0 0 737 737" fill="none" xmlns="http://www.w3.org/2000/svg">
      <g id="birb">
        <path d="M43.5866 233.594C35.5409 237.035 34.0007 246.992 33.5188 250.821C35.8244 241.631 45.4988 236.947 50.7654 236.473C66.5647 235.528 99.8844 236.513 106.778 236.519C109.297 236.521 111.087 228.422 110.199 223.845C109.992 222.777 108.969 222.168 107.908 221.929C105.561 221.401 101.722 219.66 101.985 213.912C102.064 212.175 100.958 210.442 99.2244 210.302C95.9204 210.034 92.2277 210.282 86.9976 213.34C86.7948 213.459 86.6196 213.597 86.4436 213.753C81.3857 218.223 53.4692 229.369 43.5866 233.594Z" fill="black"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M99.1082 211.733C96.0554 211.485 92.6643 211.691 87.7225 214.58C87.6311 214.633 87.534 214.706 87.3948 214.829C85.9665 216.091 83.1012 217.703 79.6449 219.43C76.1301 221.185 71.832 223.141 67.4004 225.081C61.6229 227.611 55.5579 230.14 50.6829 232.173C48.0976 233.251 45.8469 234.19 44.1513 234.915C41.1011 236.219 39.0606 238.596 37.6787 241.263C38.4855 240.505 39.335 239.819 40.2026 239.206C43.7485 236.699 47.7214 235.305 50.6366 235.042L50.6581 235.04L50.6797 235.039C62.7983 234.315 85.2018 234.72 98.1187 234.954C102.056 235.025 105.111 235.08 106.726 235.083C106.767 235.06 106.964 234.943 107.275 234.434C107.678 233.775 108.066 232.774 108.373 231.55C108.989 229.093 109.182 226.144 108.79 224.118C108.766 223.998 108.698 223.867 108.504 223.719C108.295 223.56 107.979 223.417 107.593 223.331C106.278 223.035 104.438 222.379 102.952 220.894C101.42 219.362 100.402 217.085 100.55 213.847C100.606 212.615 99.8299 211.792 99.1082 211.733ZM86.2727 212.1C91.7912 208.874 95.7854 208.582 99.3405 208.87C102.086 209.093 103.522 211.735 103.419 213.978C103.305 216.487 104.075 217.954 104.983 218.862C105.938 219.817 107.191 220.296 108.223 220.528C109.471 220.809 111.236 221.648 111.609 223.572C112.104 226.123 111.846 229.512 111.159 232.249C110.815 233.622 110.339 234.931 109.725 235.933C109.17 236.841 108.212 237.957 106.777 237.955C105.106 237.954 101.942 237.897 97.8779 237.823C84.9332 237.589 62.8633 237.191 50.8734 237.905C48.5221 238.122 45.0358 239.307 41.8608 241.552C38.694 243.79 35.9595 246.995 34.9119 251.171L32.0938 250.642C32.3384 248.699 32.8626 245.088 34.3954 241.498C35.9302 237.904 38.5382 234.191 43.022 232.274C44.7624 231.53 47.0376 230.581 49.6384 229.496C54.4938 227.471 60.484 224.973 66.2483 222.45C70.6634 220.517 74.9104 218.584 78.3614 216.86C81.8708 215.107 84.3918 213.65 85.4925 212.677C85.7052 212.489 85.9585 212.284 86.2727 212.1Z" fill="black"/>
        <path d="M109.365 235.085L97.8749 235.076C105.918 235.082 106.004 246.572 105.042 252.317C107.915 250.883 113.664 246.866 113.668 242.27C113.671 237.674 110.801 235.565 109.365 235.085Z" fill="black"/>
        <path d="M92.1051 265.233C82.048 269.533 73.6879 286.423 72.2438 295.997C76.5576 289.776 90.6843 277.192 105.025 272.425C117.871 268.154 126.588 268.134 133.768 269.576C139.512 270.729 144.378 272.457 146.666 283.949C149.527 298.314 153.831 304.063 153.831 304.063C160.525 314.122 176.806 336.945 190.589 342.701C207.817 349.897 239.95 370.203 290.218 370.244L290.23 355.881C279.22 354.436 251.972 351.31 237.041 343.254C218.379 333.185 197.276 315.69 190.101 308.502C195.372 302.283 205.546 291.179 205.57 262.454C205.085 269.156 200.672 279.685 186.884 279.674C169.65 279.659 156.746 252.359 142.384 252.348C130.894 252.338 114.61 259.985 107.905 263.809L103.604 253.752C102.126 259.496 95.322 263.799 92.1051 265.233Z" fill="black"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M97.8738 236.512L97.8761 233.639L109.599 233.649L109.82 233.723C111.765 234.373 115.108 236.979 115.104 242.271C115.101 245.155 113.321 247.66 111.435 249.506C109.512 251.388 107.226 252.832 105.683 253.602L105.204 253.841L108.599 261.78C112.087 259.889 117.234 257.408 122.844 255.296C129.237 252.89 136.376 250.906 142.385 250.911C146.429 250.915 150.233 252.834 153.821 255.461C157.081 257.848 160.33 260.947 163.561 264.029C163.89 264.343 164.218 264.656 164.547 264.969C168.142 268.39 171.735 271.72 175.474 274.203C179.206 276.681 182.966 278.234 186.886 278.237C193.225 278.242 197.365 275.2 200.035 271.329C202.579 267.64 203.763 263.216 204.087 260.073C204.128 259.681 204.234 259.296 204.418 258.947C205.498 256.905 205.652 256.892 206.704 258.974C206.905 259.372 207.008 259.817 207.006 260.263C206.924 274.428 204.641 284.692 201.676 292.239C198.968 299.13 193.204 306.674 190.616 309.838C198.502 317.403 219.263 333.662 237.041 343.254C244.346 347.196 254.751 350.583 264.396 352.988C274.021 355.387 283.526 355.176 288.979 355.892L290.23 356.057L291.653 371.682L290.217 371.68C241.4 373.076 218.446 359.26 199.97 350.062C195.674 347.923 192.591 345.747 189.719 344.308C182.52 341.301 173.542 332.72 166.755 325.334C159.941 317.917 156.038 309.969 152.652 304.884L152.609 304.824C152.569 304.767 152.514 304.687 152.445 304.584C152.307 304.376 152.113 304.072 151.875 303.667C151.4 302.857 150.747 301.641 150.008 299.975C148.531 296.642 146.708 291.512 145.258 284.23C144.146 278.644 142.449 275.677 140.542 273.951C138.627 272.218 133.735 272.382 130.894 271.811C122.574 271.804 117.968 270.971 105.478 273.787C98.4745 276.116 91.7779 279.864 86.2961 283.805C80.7945 287.76 75.4519 293.891 73.4239 296.815L70.8236 295.782C71.5763 290.792 74.9731 282.461 78.2934 276.876C81.5979 271.318 86.1048 266.24 91.5301 263.916C93.0246 263.249 95.4023 261.889 97.5686 260.021C99.7577 258.133 101.474 254.962 102.214 253.394C102.572 252.634 103.725 251.286 103.948 249.307C104.244 246.679 104.145 244.678 103.443 241.896C103.024 240.238 102.377 238.884 101.488 237.96C100.638 237.077 99.4991 236.513 97.8738 236.512ZM103.601 257.396C102.495 259.255 100.984 260.869 99.4445 262.196C97.0397 264.27 94.4127 265.777 92.6897 266.544L92.6699 266.553C88.0426 268.532 83.9278 273.02 80.7624 278.344C78.7917 281.659 77.2366 285.219 76.1788 288.542C78.4641 286.266 81.3425 283.828 84.6193 281.473C90.2812 277.402 97.2351 273.501 104.572 271.062C117.711 266.694 126.582 266.671 134.035 268.168C136.938 268.751 139.934 269.528 142.469 271.82C145.01 274.12 146.899 277.762 148.075 283.669C149.485 290.751 151.245 295.678 152.634 298.811C153.329 300.377 153.932 301.496 154.352 302.213C154.563 302.571 154.728 302.829 154.836 302.992C154.89 303.074 154.93 303.131 154.955 303.166L154.98 303.201L154.982 303.204L155.005 303.234L155.027 303.267C158.338 308.244 164.175 316.088 170.886 323.392C177.635 330.738 184.558 338.626 191.142 341.376C194.492 342.775 197.951 343.573 202.339 345.755C220.638 354.852 247.148 368.772 288.783 368.801L288.793 357.135C283.159 356.343 274.177 356.593 265.139 354.34C255.423 351.917 244.74 348.461 237.115 344.347C218.323 334.208 196.353 316.798 189.085 309.517L188.151 308.582L189.006 307.574C191.582 304.534 196.142 298.469 199.002 291.188C201.028 286.034 202.749 279.469 203.589 271.043C203.226 271.694 202.83 272.336 202.399 272.96C199.293 277.463 194.332 281.116 186.883 281.11C182.185 281.106 177.87 279.242 173.885 276.596C169.909 273.956 166.147 270.457 162.567 267.05C162.242 266.741 161.919 266.433 161.598 266.127C158.334 263.015 155.224 260.049 152.124 257.779C148.715 255.284 145.52 253.786 142.383 253.784C136.901 253.779 130.154 255.614 123.856 257.985C117.587 260.345 111.909 263.179 108.616 265.057L107.217 265.855L103.601 257.396ZM109.1 236.521L104.041 236.517C105.117 237.849 105.801 239.5 106.228 241.193C106.916 243.918 106.996 246.979 106.807 249.591C107.682 248.987 108.598 248.263 109.426 247.452C111.134 245.782 112.23 243.981 112.231 242.269C112.234 238.613 110.127 236.968 109.1 236.521Z" fill="black"/>
        <path d="M113.962 233.653C117.313 234.134 129.758 237.113 129.751 245.156C129.744 253.199 115.267 262.008 108.564 263.438L105.681 256.271C109.99 255.317 120.267 250.893 122.57 245.15C122.575 238.256 115.397 234.611 113.962 233.653Z" fill="black"/>
        <path d="M110.7 219.82C111.661 215.512 117.317 208.048 132.254 206.912C142.98 207.368 163.97 206.747 167.653 201.055C167.845 200.569 168.016 200.135 168.166 199.76C168.089 200.218 167.915 200.649 167.653 201.055C164.156 209.854 153.395 237.844 116.645 235.091C128.614 234.622 152.057 227.898 150.919 214.109C150.923 209.8 145.717 209.795 142.306 209.793C136.561 209.788 122.2 208.34 110.7 219.82Z" fill="black"/>
        <path d="M135.121 214.096C135.116 219.771 128.412 222.2 125.06 222.705C119.314 224.136 112.132 225.567 112.134 222.694C112.142 212.64 135.127 207.001 135.121 214.096Z" fill="black"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M166.54 199.964C166.645 199.699 166.743 199.45 166.833 199.226L169.582 199.997C169.479 200.615 169.255 201.186 168.939 201.706C167.156 206.185 163.437 214.96 155.487 222.291C147.416 229.734 135.09 237.933 116.325 236.527L116.376 233.66C122.266 233.429 128.313 232.16 135.377 229.361C138.911 227.962 144.609 223.93 146.654 221.783C148.664 219.671 149.733 217.201 149.488 214.227L149.483 214.167L149.483 214.107C149.484 213.346 149.265 212.889 148.983 212.573C148.674 212.227 148.181 211.931 147.464 211.707C145.986 211.244 144.065 211.23 142.304 211.229C141.774 211.228 141.18 211.217 140.531 211.204C139.07 211.176 137.328 211.142 135.392 211.217C136.132 211.959 136.558 212.938 136.557 214.097C136.554 217.593 134.461 220.008 132.135 221.539C129.853 223.042 127.168 223.83 125.343 224.115C122.486 224.825 119.174 225.56 116.543 225.746C115.241 225.838 113.936 225.811 112.902 225.475C112.37 225.303 111.812 225.018 111.38 224.533C110.923 224.019 110.697 223.38 110.698 222.693C110.698 222.391 110.715 222.095 110.748 221.802L108.225 224.322L109.298 219.508C110.432 214.426 116.754 206.651 132.145 205.48L132.23 205.473L132.315 205.477C137.629 205.703 145.479 205.661 152.431 204.862C155.911 204.462 159.111 203.879 161.638 203.068C164.15 202.261 165.702 201.32 166.376 200.379C166.432 200.237 166.487 200.099 166.54 199.964ZM164.33 205.141C163.747 205.384 163.139 205.603 162.515 205.803C159.735 206.695 156.327 207.306 152.759 207.716C149.827 208.053 146.749 208.258 143.765 208.367C145.203 208.397 146.873 208.512 148.321 208.965C149.332 209.281 150.354 209.794 151.126 210.661C151.914 211.544 152.344 212.683 152.355 214.048C152.66 217.943 151.201 221.173 148.734 223.763C148.515 223.994 148.287 224.22 148.051 224.441C150.09 223.121 151.911 221.681 153.54 220.179C158.903 215.233 162.233 209.567 164.33 205.141ZM133.927 208.408C133.356 208.392 132.806 208.372 132.279 208.35C125.934 208.845 121.419 210.503 118.284 212.505C123.806 209.658 129.359 208.701 133.927 208.408ZM113.571 222.652C113.61 222.674 113.679 222.707 113.788 222.743C114.279 222.902 115.128 222.966 116.34 222.881C118.716 222.713 121.839 222.027 124.713 221.311L124.779 221.295L124.846 221.285C126.373 221.055 128.676 220.377 130.556 219.14C132.421 217.911 133.683 216.274 133.685 214.094C133.685 213.655 133.533 213.375 133.235 213.135C132.882 212.851 132.265 212.589 131.327 212.454C129.456 212.183 126.81 212.484 124.058 213.336C121.32 214.184 118.633 215.53 116.66 217.206C114.691 218.879 113.589 220.737 113.571 222.652Z" fill="black"/>
        <path d="M147.034 186.283C120.607 187.41 106.325 205.878 102.487 214.971L91.0012 210.653C89.5827 189.108 112.584 163.274 109.708 167.58C107.407 171.026 107.782 180.505 108.257 184.814C114.029 151.785 147.083 127.396 138.458 136.006C131.559 142.894 129.823 158.022 129.817 164.724C153.976 127.976 183.956 114.978 195.927 113.073C170.637 127.989 160.468 151.823 158.544 161.876C165.373 149.381 184.003 136.802 192.751 131.902C192.852 131.841 192.948 131.787 193.039 131.742C192.944 131.795 192.848 131.848 192.751 131.902C189.63 133.802 181.494 143.358 180.1 147.531C179.069 150.613 178.177 156.147 178.654 159.02C183.444 155.194 195.036 147.83 203.078 148.986C195.897 148.98 188.706 160.464 188.699 169.082C188.691 178.557 196.351 178.663 198.746 177.708C201.613 183.455 200.172 189.199 198.73 196.379C197.678 201.616 188.221 209.138 184.293 212.27C184.293 212.741 183.478 213.322 182.917 213.602C182.14 213.99 182.836 213.432 184.293 212.27C185.793 209.762 185.797 204.461 185.804 196.369C181.504 186.311 180.069 184.874 147.034 186.283Z" fill="black"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M131.508 159.683C155.325 125.86 183.778 113.552 195.698 111.655L196.653 114.31C177.316 125.715 166.988 142.421 162.474 153.86C165.827 149.962 169.905 146.239 174.024 142.922C180.687 137.556 187.587 133.148 192.025 130.661C192.146 130.588 192.27 130.519 192.394 130.457L193.732 132.998L193.473 133.143C192.849 133.528 191.867 134.369 190.668 135.573C189.481 136.764 188.158 138.233 186.882 139.778C185.606 141.324 184.392 142.93 183.418 144.392C182.426 145.881 181.744 147.131 181.458 147.986C180.978 149.423 180.515 151.487 180.231 153.549C180.102 154.491 180.015 155.401 179.977 156.227C182.402 154.499 185.593 152.496 189.019 150.841C193.575 148.64 198.813 146.922 203.279 147.564L203.074 150.422C200.217 150.42 196.999 152.777 194.381 156.61C191.81 160.374 190.135 165.122 190.132 169.083C190.129 173.364 191.808 175.206 193.453 176.018C195.271 176.914 197.358 176.714 198.21 176.374L199.437 175.884L200.027 177.067C202.944 182.911 201.745 188.776 200.43 195.209C200.332 195.69 200.233 196.174 200.135 196.662C199.811 198.275 198.879 199.929 197.737 201.482C196.578 203.058 195.115 204.647 193.592 206.14C190.641 209.031 187.358 211.66 185.375 213.242C184.838 213.778 184.292 214.152 183.555 214.887C183.446 214.941 183.318 215.002 183.193 215.049C183.136 215.07 183.023 215.11 182.884 215.136C182.816 215.148 182.687 215.167 182.528 215.158C182.387 215.15 182.062 215.113 181.74 214.874C181.349 214.584 181.174 214.157 181.157 213.775C181.143 213.461 181.235 213.225 181.278 213.126C181.367 212.922 181.485 212.78 181.519 212.738C181.615 212.624 181.724 212.522 181.796 212.456C182.068 212.208 182.53 212.075 183.173 211.323C183.668 210.359 183.997 208.765 184.173 206.311C184.353 203.786 184.361 200.593 184.364 196.663C183.333 194.263 182.529 192.559 181.465 191.264C180.418 189.99 179.067 189.057 176.796 188.406C174.467 187.739 171.208 187.379 166.393 187.286C161.594 187.193 155.349 187.366 147.092 187.718C121.366 188.815 107.493 206.797 103.807 215.53L103.271 216.802L89.6256 211.672L89.5648 210.748C88.825 199.51 94.4262 187.341 99.6691 178.679C102.311 174.314 104.909 170.764 106.676 168.564C107.547 167.48 108.252 166.679 108.674 166.274C108.773 166.18 108.913 166.051 109.065 165.948L109.069 165.945C109.121 165.91 109.326 165.77 109.615 165.705C109.767 165.671 110.136 165.613 110.548 165.804C111.036 166.03 111.269 166.451 111.349 166.781C111.416 167.061 111.384 167.291 111.367 167.388C111.346 167.504 111.316 167.598 111.295 167.657C111.253 167.773 111.203 167.873 111.168 167.939C111.094 168.077 110.999 168.228 110.899 168.378C110.48 169.005 110.118 170.024 109.85 171.396C109.666 172.338 109.538 173.389 109.455 174.493C113.769 161.924 121.321 151.199 127.667 143.856C131.665 139.229 135.23 135.892 137.285 134.236C137.797 133.824 138.243 133.493 138.595 133.27C138.763 133.164 138.963 133.047 139.166 132.964C139.26 132.926 139.437 132.86 139.657 132.836C139.822 132.818 140.419 132.779 140.902 133.277C141.407 133.799 141.326 134.422 141.289 134.611C141.243 134.843 141.153 135.022 141.104 135.114C140.996 135.314 140.852 135.508 140.72 135.673C140.441 136.019 140.022 136.471 139.47 137.022C136.308 140.179 134.226 145.362 132.947 150.766C132.21 153.878 131.758 156.986 131.508 159.683ZM186.866 208.325C188.373 207.062 190.029 205.61 191.582 204.088C193.045 202.654 194.39 201.185 195.423 199.78C196.472 198.353 197.117 197.102 197.319 196.097C197.4 195.692 197.481 195.293 197.56 194.901C198.826 188.654 199.772 183.984 197.932 179.404C196.327 179.677 194.16 179.57 192.183 178.594C189.402 177.223 187.255 174.275 187.26 169.081C187.264 164.424 189.187 159.121 192.009 154.99C192.86 153.744 193.823 152.562 194.875 151.522C193.355 152.035 191.804 152.686 190.268 153.428C185.877 155.549 181.872 158.285 179.547 160.142L177.634 161.67L177.234 159.255C176.959 157.599 177.088 155.323 177.386 153.158C177.687 150.965 178.184 148.72 178.734 147.075C179.145 145.845 180.004 144.335 181.027 142.799C181.743 141.725 182.57 140.592 183.447 139.469C180.978 141.183 178.383 143.099 175.825 145.159C169.263 150.445 163.077 156.57 159.801 162.564L157.13 161.606C158.91 152.306 167.412 131.911 187.626 116.862C173.394 122.123 150.353 136.097 131.014 165.513L128.374 169.53L128.378 164.723C128.381 161.275 128.826 155.706 130.152 150.104C130.732 147.652 131.492 145.147 132.481 142.793C131.635 143.699 130.75 144.681 129.84 145.734C122.01 154.795 112.491 168.914 109.669 185.062L106.826 184.972C106.583 182.762 106.365 179.241 106.503 175.816C106.537 174.973 106.593 174.129 106.676 173.305C105.303 175.197 103.724 177.527 102.126 180.166C97.0959 188.477 92.0596 199.571 92.3861 209.641L101.73 213.154C106.426 203.375 120.998 185.956 146.97 184.848C155.231 184.495 161.553 184.319 166.448 184.414C171.328 184.508 174.89 184.872 177.587 185.645C180.342 186.435 182.22 187.659 183.684 189.439C185.091 191.151 186.059 193.319 187.121 195.804L187.237 196.075L187.237 196.421C187.234 200.425 187.231 203.815 187.038 206.516C186.993 207.142 186.938 207.746 186.866 208.325Z" fill="black"/>
        <path d="M198.744 179.144C204.484 185.851 221.706 200.707 233.196 200.717C247.558 200.728 257.613 199.301 271.98 193.567C286.347 187.834 316.521 172.06 343.811 170.646C371.1 169.232 425.677 169.278 432.859 167.847C440.042 166.417 457.277 164.995 470.214 152.079C471.651 151.123 480.271 147.778 477.392 156.394C474.654 164.586 480.129 167.813 487.198 162.338C487.358 162.214 487.527 162.104 487.708 162.014C507.858 151.968 541.797 136.021 552.098 129.166C565.031 120.559 598.082 99.0424 611.018 87.5629C623.953 76.0834 635.446 73.2203 641.191 73.2251C646.935 73.2298 661.294 77.5505 655.539 90.4722C655.535 94.781 660.277 91.697 662.72 90.4781C671.915 85.8896 682.353 84.7492 687.14 84.7532C695.758 84.7603 708.678 91.9524 704.362 100.566C692.858 117.792 675.619 123.523 662.688 129.258C653.13 133.496 612.407 145.015 589.418 156.486C585.354 158.514 549.185 177.997 533.376 190.911C517.567 203.824 461.504 264.101 461.502 266.974C461.5 269.846 422.688 310.03 418.375 315.772C414.061 321.513 388.188 347.345 383.878 348.777C378.133 349.251 365.781 349.911 362.335 348.76C368.081 347.328 381.01 343.03 386.76 337.29C393.947 330.114 406.884 317.198 411.196 312.893C422.695 301.412 432.773 272.695 442.843 252.596C458.549 221.246 473.04 208.096 487.413 195.181C498.912 184.85 525.733 170.318 539.145 162.19L613.862 122.036C618.404 119.868 626.418 116.019 633.988 112.38C636.994 110.934 635.939 108.042 632.796 109.157C612.246 116.448 577.169 132.257 534.325 165.058C556.399 139.224 609.564 109.106 616.75 103.367C627.138 95.0703 631.339 92.0972 632.987 90.1872C634.023 88.986 632.698 87.5633 631.151 87.9146C626.251 89.0277 620.854 92.8222 612.446 97.618C602.388 103.355 576.521 120.569 556.403 133.479C536.285 146.388 483.116 180.815 478.805 183.684C475.931 186.554 475.933 183.682 467.303 199.474C464.426 204.259 456.659 217.849 448.603 233.929C440.547 250.008 414.578 275.074 402.601 285.597C393.499 293.249 362.368 308.544 336.513 311.395C316.415 314.251 288.828 314.062 270.45 307.032C250.35 298.398 236.86 286.034 228.829 271.091C235.048 277.319 255.243 286.624 280.522 285.496C312.12 284.086 364.917 267.905 402.636 243.945C418.442 233.904 442.878 209.507 448.649 177.914C448.652 175.042 446.906 172.518 435.722 179.34C409.857 195.117 343.774 185.068 336.628 185.776C322.29 187.198 306.458 196.999 300.711 199.867C299.274 199.866 289.991 208.077 276.286 210.806C259.71 214.107 256.175 215.098 233.187 212.207C209.61 207.766 198.73 196.379 197.296 193.506L198.744 179.144Z" fill="black"/>
        <path d="M360.939 347.322L381.047 347.339L381.031 366.664C381.03 367.177 381.167 367.68 381.426 368.121L394.267 389.993C394.92 391.105 394.757 392.51 393.867 393.444C379.848 408.159 351.833 440.389 340.736 463.644L339.281 486.623L317.724 502.404C317.411 504.893 317.379 509.484 318.655 513.656C319.404 516.103 317.643 519.639 315.084 519.637L308.291 519.632C307.054 519.631 306.056 518.644 304.99 518.018C304.032 517.456 302.548 517.556 300.475 519.625C296.163 523.93 287.551 518.178 287.559 508.124C284.208 508.122 277.506 506.967 277.51 502.371C277.515 496.626 276.086 488.007 290.461 472.22C306.55 467.637 313.448 463.621 314.885 462.186C329.739 446.399 357.44 411.377 360.898 397.592C360.903 397.587 360.907 397.583 360.912 397.578C360.8 396.503 359.834 392.214 353.726 386.096L335.071 367.409C333.636 365.971 330.478 362.809 329.335 355.914C336.505 354.005 353.144 347.603 362.344 337.269C360.042 341.864 350.844 349.229 346.532 353.055C353.227 363.115 366.614 383.808 366.612 386.106C367.758 390.703 366.604 396.639 365.165 399.032L352.222 420.565L337.843 440.661C332.571 447.359 320.461 462.555 316.279 465.06C309.559 469.084 299.907 473.525 293.201 476.037C300.189 482.989 317.743 479.424 317.743 479.424C317.743 479.424 336.103 453.299 344.705 440.379L376.664 388.987C362.917 377.486 358.042 361.204 355.149 354.499C355.177 352.105 356.374 348.467 360.939 347.322Z" fill="black"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M289.081 355.88C297.697 357.324 316.654 359.35 329.295 355.914C330.726 362.618 331.679 368.044 332.473 372.567C334.062 381.611 335.015 387.038 337.883 391.828C339.29 394.176 340.85 396.065 342.113 397.593C344.712 400.739 346.05 402.358 342.182 403.321C336.853 404.649 288.25 443.007 281.23 448.563C280.667 449.008 280.324 449.618 280.233 450.329C279.639 455.013 277.963 473.043 287.549 472.218C291.857 472.221 284.445 492.546 278.916 490.882C274.059 489.42 269.914 488.891 266.536 488.459C263.672 488.093 261.36 487.798 259.633 487.065C257.182 486.024 252.405 484.53 249.973 485.614C246.147 487.319 241.429 487.038 237.273 480.794C222.91 482.218 222.917 473.6 222.921 469.292C215.737 472.158 211.436 463.537 214.314 456.358C214.564 455.735 214.802 455.113 215.04 454.494C217.54 447.977 219.88 441.875 232.998 440.574C237.997 440.079 241.429 440.277 244.325 440.445C249.751 440.759 253.294 440.965 261.726 436.289C274.658 429.119 309.15 401.858 309.154 397.549C309.157 393.24 293.375 373.119 290.505 370.244C288.209 367.944 288.599 359.231 289.081 355.88ZM310.099 371.697L310.464 371.697C311.45 371.698 312.366 372.204 312.892 373.038L327.893 396.834C328.672 398.069 328.4 399.692 327.262 400.606L263.149 452.09C257.915 456.009 242.915 457.776 235.077 450.248C233.831 449.051 234.363 447.069 236.017 446.569C240.189 445.305 244.981 445.161 249.53 445.024C254.143 444.885 258.506 444.753 261.72 443.471C267.139 441.308 307.997 407.185 316.3 400.226C317.202 399.47 317.526 398.265 317.124 397.159C315.785 393.483 312.423 384.82 307.552 376.184C306.438 374.21 307.832 371.695 310.099 371.697Z" fill="black"/>
      </g>
      <g id="stick">
        <path d="M436.087 489.373L335.551 483.628L315.444 502.3C317.837 503.736 323.214 508.045 334.115 508.045H391.564C391.564 508.045 407.362 518.099 415.98 536.77C424.597 555.442 453.322 601.402 484.919 615.765C510.196 627.255 554.336 630.128 572.529 630.128C588.327 630.128 618.488 634.15 658.702 655.981C629.978 630.128 592.157 622.468 572.529 618.638C530.878 612.893 530.878 620.074 494.972 601.402C440.971 573.321 446.14 536.77 424.597 510.917C473.429 506.608 506.462 531.025 516.516 536.77C526.569 542.515 536.623 558.314 552.421 568.368C567.876 578.203 576.458 578.417 571.447 570.355C571.223 569.994 570.904 569.696 570.549 569.461C564.099 565.188 551.414 550.287 516.516 520.971C488.514 497.449 451.885 489.852 436.087 489.373Z" fill="black"/>
        <path d="M229.5 448C194.827 432.921 143.767 425.535 95.4358 425.008C47.105 424.481 46.605 450.981 95.4358 450.642C144.267 450.304 200.46 457.177 210.007 462.706C214.027 464.716 223.895 465.874 229.5 448Z" fill="black"/>
        <path d="M336 483.5C336 483.5 247.167 456.167 229.5 448C225 459.5 215.333 463.167 211.5 463.5L316 502.5L336 483.5Z" fill="black"/>
      </g>
      </svg>
    </div>
    <p>Fetching data...</p>
  </div>

{% endmacro %}
