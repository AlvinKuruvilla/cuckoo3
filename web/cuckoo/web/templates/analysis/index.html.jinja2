{% extends "base.html.jinja2" %}
{% set active_page = "analyses" %}
{% set report_page = "sample" %}
{% set title = "Analysis" %}

{% from 'macros.html.jinja2' import
  ui_box, ui_signatures, error_box,
  color_class, color_text,
  render_dict, render_table
%}

{% block page_styles %}
  <link rel="stylesheet" type="text/css" href="{{ static('/css/chart.min.css') }}" />
{% endblock %}

{% block page_script %}

  {#
    not the most pretty solution; prevents a blinking UI component on render and does
    sorting chart data inline, based on a hardcoded list of queries.
  #}
  {% set chart_labels = ['trojan','ransomware','stealer','spyware','keylogger','dropper','loader','evasion','rat'] %}
  {% set chart_values = [] %}

  {% if analysis.tags and analysis.tags|length %}
    {% for tag in chart_labels %}
      {% if tag in analysis.tags %}
        {{ chart_values.append(90)|default("", True) }}
      {% else %}
        {{ chart_values.append(5)|default("", True) }}
      {% endif %}
    {% endfor %}
  {% endif %}

  <script type="text/javascript" src="{{ static('js/chart.bundle.min.js') }}"></script>
  <script src="{{ static('js/analysis.task.js') }}"></script>
  <script>
    window.analysis = "{{ analysis.tasks | safe }}";
    // threat radar chart
    (function() {

      const ctx = document.querySelector('canvas#behavior-map');
      if(!window.Chart || !ctx) return;

      const tags = {{ analysis.tags|tojson }};
      const labels = {{ chart_labels|tojson }};
      const data = {{ chart_values|tojson }};
      const opacity = .8;
      const type = 'radar';

      // remove the chart if the data is not sufficient to display anything
      // that matches. Needs review to as if this behavior is wanted like this.
      if(data.indexOf(90) == -1) {
        lib.parent('.box', ctx).remove();
        return;
      } else {
        lib.parent('.box', ctx).removeAttribute('hidden');
      }

      let chart;

      function renderChart() {
        if(chart)
          chart.destroy();
        chart = new Chart(ctx.getContext('2d'), {
          type,
          data: {
            labels: labels.map(label => label.trim().replace(/^\w/, c => c.toUpperCase())),
            datasets: [{
              data,
              backgroundColor: ['rgba(249,93,106, '+opacity+')'],
              pointRadius: 0
            }]
          },
          options: {
            scale: {
              ticks: {
                startAtZero: true,
                min: 0,
                max: 100,
                stepSize: 10,
                display: false
              }
            },
            legend: {
              display: false
            },
            tooltips: {
              enabled: false
            },
            animation: {
              duration: 0
            },
            hover: {
              animationDuration: 0
            },
            responsive: true,
            maintainAspectRatio: true,
            responsiveAnimationDuration: 0
          }
        });
      }

      renderChart();

      let prevWidth;
      window.addEventListener("resize", renderChart);

    }());

    // comparison form
    (function() {

      const compareForm = document.querySelector('form#compare-tasks')
      if(compareForm) {

        const submit = compareForm.querySelector('input[type="submit"]');
        const checkboxes = compareForm.querySelectorAll('input[type="checkbox"]');
        const checked = () => [...checkboxes].filter(checkbox => checkbox.checked);

        compareForm.addEventListener('submit', ev => {
          ev.preventDefault();
          const ids = checked().map(checkbox => checkbox.value);
          window.location = '/compare/' + ids.join('/');
        });

        // limits selectable tasks to max 2
        function checkValidity() {

          if(checked().length == 2) {
            submit.disabled = false;
            checkboxes.forEach(cb => {
              if(cb.checked == false)
                cb.disabled = true;
            })
          } else {
            submit.disabled = true;
            checkboxes.forEach(cb => {
              cb.disabled = false
            });
          }
        }

        checkboxes.forEach(checkbox => {
          checkbox.addEventListener('change', checkValidity)
        });

        // in the case of browser-cached ticked checkboxes, make sure
        // the rules listen to that too.
        setTimeout(checkValidity, 20);

      }

    }());
  </script>
{% endblock %}

{% block body %}

  <div class="container is-portal-view">
    <div class="columns is-divided is-vtop">
      <aside class="column is-auto has-padding is-sticky">
        {% include "partial/analysis-index.html.jinja2" %}
      </aside>
      <section class="column has-padding">

        <h2>Analysis</h2>
        <p>Description and overview of target and submission configuration.</p>

        <nav class="tabbar has-background-transparent" data-enhance id="analysisReport">
          <a class="tabbar-link is-active" href="#tab-overview">Overview</a>
        </nav>

        {% if debug_template_data %}
          {% call ui_box(title="Template data", has_padding=False, collapsed=True) %}
            <h3 class="has-margin-x">Analysis</h3>
            {{ render_dict(analysis) }}
            <h3 class="has-margin-x">Pre</h3>
            {{ render_dict(pre) }}
          {% endcall %}
        {% endif %}

        {# handles errors #}
        {% if analysis.errors.errors|length > 0 %}
          {% call error_box(analysis.errors.errors) %}
            <p class="has-padding no-margin-bottom">Errors occured during this analysis.</p>
          {% endcall %}
        {% endif %}

        <div id="tab-overview">
          {% include "analysis/components/summary.html.jinja2" %}

          {# include components if they exist inside the template scope #}
          {% if pre and pre.signatures|length %}
            {% include "analysis/components/static-signatures.html.jinja2" %}
          {% endif %}

          {% if analysis and analysis.ttps|length %}
            {% include "analysis/components/mitre.html.jinja2" %}
          {% endif %}

          {% if analysis.tags|length %}
            {% include "analysis/components/behavioral-map.html.jinja2" %}
          {% endif %}

          {% if analysis.tasks|length and analysis.tasks|length > 1 %}
            {% include "analysis/components/compare-tasks.html.jinja2" %}
          {% endif %}
        </div>

        {# tab: static.target/static.pe #}
        {% if pre.static.pe %}
          <div id="tab-pefiles" hidden>
            {% include "analysis/components/pefiles.html.jinja2" %}
          </div>
        {% endif %}

        {# tab: static.virustotal #}
        {% if pre.virustotal %}
          <div id="tab-virus-total" hidden>
            {% include "analysis/components/virustotal.html.jinja2" %}
          </div>
        {% endif %}

        {% if pre.misp %}
          <div id="tab-misp" hidden>
            {% include "analysis/components/misp.html.jinja2" %}
          </div>
        {% endif %}

        {# tab: pre.intelmq #}
        {% if pre.intelmq %}
          <div id="tab-intelmq" hidden>
            {% include "analysis/components/intelmq.html.jinja2" %}
          </div>
        {% endif %}

        {% if pre.static.office %}
          <div id="tab-office" hidden>
            {% include "analysis/components/office.html.jinja2" %}
          </div>
        {% endif %}

      </section>
    </div>
  </div>
{% endblock %}
